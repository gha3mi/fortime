var tipuesearch = {"pages":[{"title":" ForTime ","text":"ForTime ForTime : A Fortran library for measuring elapsed time, CPU time, OMP time and MPI time. fpm dependency If you want to use ForTime as a dependency in your own fpm project,\nyou can easily include it by adding the following line to your fpm.toml file: [dependencies] fortime = { git = \"https://github.com/gha3mi/fortime.git\" } Usage Measuring elapsed time To measure the elapsed wall-clock time, use the following: use fortime type ( timer ) :: t call t % timer_start () ! Your code or section to be timed call t % timer_stop ( nloops , message , print ) ! nloops, message and print are optional call t % timer_write ( file_name ) ! Optionally, write the result to a file Measuring CPU time To measure the CPU time consumed by your code, use these functions: use fortime type ( timer ) :: t call t % ctimer_start () ! Your code or section to be timed call t % ctimer_stop ( nloops , message , print ) ! nloops, message and print are optional call t % ctimer_write ( file_name ) ! Optionally, write the result to a file Measuring OpenMP (OMP) time If your code includes OpenMP parallelization, you can measure the time taken by the parallel regions using: use fortime type ( timer ) :: t call t % otimer_start () ! Your code or section to be timed call t % otimer_stop ( nloops , message , print ) ! nloops, message and print are optional call t % otimer_write ( file_name ) ! Optionally, write the result to a file Note: Ensure you compile with the -DUSE_OMP option when using the OpenMP timer. Measuring MPI time When using MPI (Message Passing Interface), you can measure the time taken by your MPI processes using: use fortime type ( timer ) :: t call t % mtimer_start () ! Your code or section to be timed call t % mtimer_stop ( nloops , message , print ) ! nloops, message and print are optional call t % mtimer_write ( file_name ) ! Optionally, write the result to a file Note: Don't forget to compile with the -DUSE_MPI option when using the MPI timer. How to run examples Clone the repository: You can clone the ForTime repository from GitHub using the following command: git clone https://github.com/gha3mi/fortime.git cd fortime For Intel Fortran Compiler (ifort): shell\n  fpm run --example --all --compiler ifort For Intel Fortran Compiler (ifx): shell\n  fpm run --example --all --compiler ifx For NVIDIA Compiler (nvfortran): shell\n  fpm run --example --all --compiler nvfortran For GNU Fortran Compiler (gfortran): shell\n  fpm run --example --all --compiler gfortran How to run tests For Intel Fortran Compiler (ifort): shell\n  fpm test --compiler ifort For Intel Fortran Compiler (ifx): shell\n  fpm test --compiler ifx For NVIDIA Compiler (nvfortran): shell\n  fpm test --compiler nvfortran For GNU Fortran Compiler (gfortran): shell\n  fpm test --compiler gfortran API documentation The most up-to-date API documentation for the master branch is available here .\nTo generate the API documentation for ForTime using ford run the following\ncommand: ford ford.yml Contributing Contributions to ForTime are welcome! If you find any issues or would like to suggest improvements, please open an issue. Developer Info Seyed Ali Ghasemi","tags":"home","loc":"index.html"},{"title":"timer – ForTime ","text":"type, public :: timer Components Type Visibility Attributes Name Initial integer, private :: clock_rate integer, private :: clock_start integer, private :: clock_end integer, private :: clock_elapsed real(kind=rk), public :: elapsed_time real(kind=rk), private :: cpu_start real(kind=rk), private :: cpu_end real(kind=rk), private :: cpu_elapsed real(kind=rk), public :: cpu_time real(kind=rk), private :: omp_start real(kind=rk), private :: omp_end real(kind=rk), private :: omp_elapsed real(kind=rk), public :: omp_time real(kind=rk), private :: mpi_start real(kind=rk), private :: mpi_end real(kind=rk), private :: mpi_elapsed real(kind=rk), public :: mpi_time Type-Bound Procedures procedure, public :: timer_start public impure subroutine timer_start (this) Author Seyed Ali Ghasemi Starts the timer by recording the current processor clock value.\nThis value is used to calculate the elapsed time later. Arguments Type Intent Optional Attributes Name class( timer ), intent(inout) :: this procedure, public :: timer_stop public impure subroutine timer_stop (this, nloops, message, print) Author Seyed Ali Ghasemi Stops the timer and calculates the elapsed time.\nOptionally, it can print a message along with the elapsed time. Arguments Type Intent Optional Attributes Name class( timer ), intent(inout) :: this integer, intent(in), optional :: nloops character(len=*), intent(in), optional :: message logical, intent(in), optional :: print procedure, public :: timer_write private impure subroutine timer_write (this, file_name) Author Seyed Ali Ghasemi Writes the elapsed time to a file. Arguments Type Intent Optional Attributes Name class( timer ), intent(in) :: this character(len=*), intent(in) :: file_name procedure, public :: ctimer_start private impure subroutine ctimer_start (this) Author Seyed Ali Ghasemi Starts the timer by recording the current CPU time value.\nThis value is used to calculate the CPU time later. Arguments Type Intent Optional Attributes Name class( timer ), intent(inout) :: this procedure, public :: ctimer_stop private impure subroutine ctimer_stop (this, nloops, message, print) Author Seyed Ali Ghasemi Stops the timer and calculates the CPU time.\nOptionally, it can print a message along with the CPU time. Arguments Type Intent Optional Attributes Name class( timer ), intent(inout) :: this integer, intent(in), optional :: nloops character(len=*), intent(in), optional :: message logical, intent(in), optional :: print procedure, public :: ctimer_write private impure subroutine ctimer_write (this, file_name) Author Seyed Ali Ghasemi Writes the CPU time to a file. Arguments Type Intent Optional Attributes Name class( timer ), intent(in) :: this character(len=*), intent(in) :: file_name procedure, public :: otimer_start private impure subroutine otimer_start (this) Author Seyed Ali Ghasemi Starts the timer by recording the current OMP time value.\nThis value is used to calculate the OMP time later. Arguments Type Intent Optional Attributes Name class( timer ), intent(inout) :: this procedure, public :: otimer_stop private impure subroutine otimer_stop (this, nloops, message, print) Author Seyed Ali Ghasemi Stops the timer and calculates the OMP time.\nOptionally, it can print a message along with the OMP time. Arguments Type Intent Optional Attributes Name class( timer ), intent(inout) :: this integer, intent(in), optional :: nloops character(len=*), intent(in), optional :: message logical, intent(in), optional :: print procedure, public :: otimer_write private impure subroutine otimer_write (this, file_name) Author Seyed Ali Ghasemi Writes the OMP time to a file. Arguments Type Intent Optional Attributes Name class( timer ), intent(in) :: this character(len=*), intent(in) :: file_name procedure, public :: mtimer_start private impure subroutine mtimer_start (this) Author Seyed Ali Ghasemi Starts the timer by recording the current MPI time value.\nThis value is used to calculate the MPI time later. Arguments Type Intent Optional Attributes Name class( timer ), intent(inout) :: this procedure, public :: mtimer_stop private impure subroutine mtimer_stop (this, nloops, message, print) Author Seyed Ali Ghasemi Stops the timer and calculates the MPI time.\nOptionally, it can print a message along with the MPI time. Arguments Type Intent Optional Attributes Name class( timer ), intent(inout) :: this integer, intent(in), optional :: nloops character(len=*), intent(in), optional :: message logical, intent(in), optional :: print procedure, public :: mtimer_write private impure subroutine mtimer_write (this, file_name) Author Seyed Ali Ghasemi Writes the MPI time to a file. Arguments Type Intent Optional Attributes Name class( timer ), intent(in) :: this character(len=*), intent(in) :: file_name","tags":"","loc":"type/timer.html"},{"title":"timer_start – ForTime","text":"public impure subroutine timer_start(this) Starts the timer by recording the current processor clock value.\nThis value is used to calculate the elapsed time later. Type Bound timer Arguments Type Intent Optional Attributes Name class( timer ), intent(inout) :: this Called by proc~~timer_start~~CalledByGraph proc~timer_start fortime::timer%timer_start program~example1 example1 program~example1->proc~timer_start program~example2 example2 program~example2->proc~timer_start program~test1 test1 program~test1->proc~timer_start program~test13 test13 program~test13->proc~timer_start program~test14 test14 program~test14->proc~timer_start program~test15 test15 program~test15->proc~timer_start program~test2 test2 program~test2->proc~timer_start program~test3 test3 program~test3->proc~timer_start Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code impure subroutine timer_start ( this ) class ( timer ), intent ( inout ) :: this ! Get the processor clock rate call system_clock ( count_rate = this % clock_rate ) ! Start the timer call system_clock ( count = this % clock_start ) end subroutine timer_start","tags":"","loc":"proc/timer_start.html"},{"title":"timer_stop – ForTime","text":"public impure subroutine timer_stop(this, nloops, message, print) Stops the timer and calculates the elapsed time.\nOptionally, it can print a message along with the elapsed time. Type Bound timer Arguments Type Intent Optional Attributes Name class( timer ), intent(inout) :: this integer, intent(in), optional :: nloops character(len=*), intent(in), optional :: message logical, intent(in), optional :: print Calls proc~~timer_stop~~CallsGraph proc~timer_stop fortime::timer%timer_stop proc~print_time fortime::print_time proc~timer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~timer_stop~~CalledByGraph proc~timer_stop fortime::timer%timer_stop program~example1 example1 program~example1->proc~timer_stop program~example2 example2 program~example2->proc~timer_stop program~test1 test1 program~test1->proc~timer_stop program~test13 test13 program~test13->proc~timer_stop program~test14 test14 program~test14->proc~timer_stop program~test15 test15 program~test15->proc~timer_stop program~test2 test2 program~test2->proc~timer_stop program~test3 test3 program~test3->proc~timer_stop Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code impure subroutine timer_stop ( this , nloops , message , print ) class ( timer ), intent ( inout ) :: this integer , intent ( in ), optional :: nloops character ( * ), intent ( in ), optional :: message character (:), allocatable :: msg logical , intent ( in ), optional :: print ! Stop the timer call system_clock ( count = this % clock_end ) ! Calculate the elapsed processor ticks this % clock_elapsed = this % clock_end - this % clock_start ! Convert processor ticks to seconds if (. not . present ( nloops )) & this % elapsed_time = real ( this % clock_elapsed , kind = rk ) / real ( this % clock_rate , kind = rk ) if ( present ( nloops )) & this % elapsed_time = real ( this % clock_elapsed , kind = rk ) / real ( this % clock_rate , kind = rk ) / real ( nloops , kind = rk ) ! Print the elapsed time if (. not . present ( message )) then msg = \"Elapsed time:\" else msg = message end if if ( present ( print )) then if ( print ) call print_time ( this % elapsed_time , msg ) else call print_time ( this % elapsed_time , msg ) end if ! Deallocate the message if ( allocated ( msg )) deallocate ( msg ) end subroutine timer_stop","tags":"","loc":"proc/timer_stop.html"},{"title":"timer_write – ForTime","text":"private impure subroutine timer_write(this, file_name) Writes the elapsed time to a file. Type Bound timer Arguments Type Intent Optional Attributes Name class( timer ), intent(in) :: this character(len=*), intent(in) :: file_name Called by proc~~timer_write~~CalledByGraph proc~timer_write fortime::timer%timer_write program~example2 example2 program~example2->proc~timer_write program~test14 test14 program~test14->proc~timer_write program~test15 test15 program~test15->proc~timer_write program~test2 test2 program~test2->proc~timer_write program~test3 test3 program~test3->proc~timer_write Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code impure subroutine timer_write ( this , file_name ) class ( timer ), intent ( in ) :: this character ( * ), intent ( in ) :: file_name logical :: file_exists integer :: nunit ! Check if the file exists inquire ( file = file_name , exist = file_exists ) ! Open the file in appropriate mode if ( file_exists ) then open ( newunit = nunit , file = file_name , status = 'old' , action = 'write' , position = 'append' ) else open ( newunit = nunit , file = file_name , status = 'new' , action = 'write' ) end if ! Write the elapsed time to the file write ( nunit , '(g0)' ) this % elapsed_time ! Close the file close ( nunit ) end subroutine timer_write","tags":"","loc":"proc/timer_write.html"},{"title":"ctimer_start – ForTime","text":"private impure subroutine ctimer_start(this) Starts the timer by recording the current CPU time value.\nThis value is used to calculate the CPU time later. Type Bound timer Arguments Type Intent Optional Attributes Name class( timer ), intent(inout) :: this Called by proc~~ctimer_start~~CalledByGraph proc~ctimer_start fortime::timer%ctimer_start program~example3 example3 program~example3->proc~ctimer_start program~example4 example4 program~example4->proc~ctimer_start program~test16 test16 program~test16->proc~ctimer_start program~test17 test17 program~test17->proc~ctimer_start program~test18 test18 program~test18->proc~ctimer_start program~test4 test4 program~test4->proc~ctimer_start program~test5 test5 program~test5->proc~ctimer_start program~test6 test6 program~test6->proc~ctimer_start Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code impure subroutine ctimer_start ( this ) class ( timer ), intent ( inout ) :: this ! Start the timer call cpu_time ( this % cpu_start ) end subroutine ctimer_start","tags":"","loc":"proc/ctimer_start.html"},{"title":"ctimer_stop – ForTime","text":"private impure subroutine ctimer_stop(this, nloops, message, print) Stops the timer and calculates the CPU time.\nOptionally, it can print a message along with the CPU time. Type Bound timer Arguments Type Intent Optional Attributes Name class( timer ), intent(inout) :: this integer, intent(in), optional :: nloops character(len=*), intent(in), optional :: message logical, intent(in), optional :: print Calls proc~~ctimer_stop~~CallsGraph proc~ctimer_stop fortime::timer%ctimer_stop proc~print_time fortime::print_time proc~ctimer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~ctimer_stop~~CalledByGraph proc~ctimer_stop fortime::timer%ctimer_stop program~example3 example3 program~example3->proc~ctimer_stop program~example4 example4 program~example4->proc~ctimer_stop program~test16 test16 program~test16->proc~ctimer_stop program~test17 test17 program~test17->proc~ctimer_stop program~test18 test18 program~test18->proc~ctimer_stop program~test4 test4 program~test4->proc~ctimer_stop program~test5 test5 program~test5->proc~ctimer_stop program~test6 test6 program~test6->proc~ctimer_stop Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code impure subroutine ctimer_stop ( this , nloops , message , print ) class ( timer ), intent ( inout ) :: this integer , intent ( in ), optional :: nloops character ( * ), intent ( in ), optional :: message character (:), allocatable :: msg logical , intent ( in ), optional :: print ! Stop the timer call cpu_time ( this % cpu_end ) ! Calculate the elapsed CPU time this % cpu_elapsed = this % cpu_end - this % cpu_start ! Convert CPU time to seconds if (. not . present ( nloops )) this % cpu_time = this % cpu_elapsed if ( present ( nloops )) this % cpu_time = this % cpu_elapsed / real ( nloops , kind = rk ) ! Print the elapsed time if (. not . present ( message )) then msg = \"CPU time:\" else msg = message end if if ( present ( print )) then if ( print ) call print_time ( this % cpu_time , msg ) else call print_time ( this % cpu_time , msg ) end if ! Deallocate the message if ( allocated ( msg )) deallocate ( msg ) end subroutine ctimer_stop","tags":"","loc":"proc/ctimer_stop.html"},{"title":"ctimer_write – ForTime","text":"private impure subroutine ctimer_write(this, file_name) Writes the CPU time to a file. Type Bound timer Arguments Type Intent Optional Attributes Name class( timer ), intent(in) :: this character(len=*), intent(in) :: file_name Called by proc~~ctimer_write~~CalledByGraph proc~ctimer_write fortime::timer%ctimer_write program~example4 example4 program~example4->proc~ctimer_write program~test17 test17 program~test17->proc~ctimer_write program~test18 test18 program~test18->proc~ctimer_write program~test5 test5 program~test5->proc~ctimer_write program~test6 test6 program~test6->proc~ctimer_write Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code impure subroutine ctimer_write ( this , file_name ) class ( timer ), intent ( in ) :: this character ( * ), intent ( in ) :: file_name logical :: file_exists integer :: nunit ! Check if the file exists inquire ( file = file_name , exist = file_exists ) ! Open the file in appropriate mode if ( file_exists ) then open ( newunit = nunit , file = file_name , status = 'old' , action = 'write' , position = 'append' ) else open ( newunit = nunit , file = file_name , status = 'new' , action = 'write' ) end if ! Write the CPU time to the file write ( nunit , '(g0)' ) this % cpu_time ! Close the file close ( nunit ) end subroutine ctimer_write","tags":"","loc":"proc/ctimer_write.html"},{"title":"otimer_start – ForTime","text":"private impure subroutine otimer_start(this) Uses omp_lib proc~~otimer_start~~UsesGraph proc~otimer_start fortime::timer%otimer_start omp_lib omp_lib proc~otimer_start->omp_lib Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Starts the timer by recording the current OMP time value.\nThis value is used to calculate the OMP time later. Type Bound timer Arguments Type Intent Optional Attributes Name class( timer ), intent(inout) :: this Calls proc~~otimer_start~~CallsGraph proc~otimer_start fortime::timer%otimer_start omp_get_wtime omp_get_wtime proc~otimer_start->omp_get_wtime Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~otimer_start~~CalledByGraph proc~otimer_start fortime::timer%otimer_start program~test19 test19 program~test19->proc~otimer_start program~test20 test20 program~test20->proc~otimer_start program~test21 test21 program~test21->proc~otimer_start program~test7 test7 program~test7->proc~otimer_start program~test8 test8 program~test8->proc~otimer_start program~test9 test9 program~test9->proc~otimer_start Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code impure subroutine otimer_start ( this ) use omp_lib class ( timer ), intent ( inout ) :: this ! Start the timer this % omp_start = omp_get_wtime () end subroutine otimer_start","tags":"","loc":"proc/otimer_start.html"},{"title":"otimer_stop – ForTime","text":"private impure subroutine otimer_stop(this, nloops, message, print) Uses omp_lib proc~~otimer_stop~~UsesGraph proc~otimer_stop fortime::timer%otimer_stop omp_lib omp_lib proc~otimer_stop->omp_lib Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Stops the timer and calculates the OMP time.\nOptionally, it can print a message along with the OMP time. Type Bound timer Arguments Type Intent Optional Attributes Name class( timer ), intent(inout) :: this integer, intent(in), optional :: nloops character(len=*), intent(in), optional :: message logical, intent(in), optional :: print Calls proc~~otimer_stop~~CallsGraph proc~otimer_stop fortime::timer%otimer_stop omp_get_wtime omp_get_wtime proc~otimer_stop->omp_get_wtime proc~print_time fortime::print_time proc~otimer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~otimer_stop~~CalledByGraph proc~otimer_stop fortime::timer%otimer_stop program~test19 test19 program~test19->proc~otimer_stop program~test20 test20 program~test20->proc~otimer_stop program~test21 test21 program~test21->proc~otimer_stop program~test7 test7 program~test7->proc~otimer_stop program~test8 test8 program~test8->proc~otimer_stop program~test9 test9 program~test9->proc~otimer_stop Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code impure subroutine otimer_stop ( this , nloops , message , print ) use omp_lib class ( timer ), intent ( inout ) :: this integer , intent ( in ), optional :: nloops character ( * ), intent ( in ), optional :: message character (:), allocatable :: msg logical , intent ( in ), optional :: print ! Stop the timer this % omp_end = omp_get_wtime () ! Calculate the elapsed OMP time this % omp_elapsed = this % omp_end - this % omp_start ! Convert OMP time to seconds if (. not . present ( nloops )) this % omp_time = this % omp_elapsed if ( present ( nloops )) this % omp_time = this % omp_elapsed / real ( nloops , kind = rk ) ! Print the elapsed time if (. not . present ( message )) then msg = \"OMP time:\" else msg = message end if if ( present ( print )) then if ( print ) call print_time ( this % omp_time , msg ) else call print_time ( this % omp_time , msg ) end if ! Deallocate the message if ( allocated ( msg )) deallocate ( msg ) end subroutine otimer_stop","tags":"","loc":"proc/otimer_stop.html"},{"title":"otimer_write – ForTime","text":"private impure subroutine otimer_write(this, file_name) Uses omp_lib proc~~otimer_write~~UsesGraph proc~otimer_write fortime::timer%otimer_write omp_lib omp_lib proc~otimer_write->omp_lib Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Writes the OMP time to a file. Type Bound timer Arguments Type Intent Optional Attributes Name class( timer ), intent(in) :: this character(len=*), intent(in) :: file_name Called by proc~~otimer_write~~CalledByGraph proc~otimer_write fortime::timer%otimer_write program~test20 test20 program~test20->proc~otimer_write program~test21 test21 program~test21->proc~otimer_write program~test8 test8 program~test8->proc~otimer_write program~test9 test9 program~test9->proc~otimer_write Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code impure subroutine otimer_write ( this , file_name ) use omp_lib class ( timer ), intent ( in ) :: this character ( * ), intent ( in ) :: file_name logical :: file_exists integer :: nunit ! Check if the file exists inquire ( file = file_name , exist = file_exists ) ! Open the file in appropriate mode if ( file_exists ) then open ( newunit = nunit , file = file_name , status = 'old' , action = 'write' , position = 'append' ) else open ( newunit = nunit , file = file_name , status = 'new' , action = 'write' ) end if ! Write the OMP time to the file write ( nunit , '(g0)' ) this % omp_time ! Close the file close ( nunit ) end subroutine otimer_write","tags":"","loc":"proc/otimer_write.html"},{"title":"mtimer_start – ForTime","text":"private impure subroutine mtimer_start(this) Starts the timer by recording the current MPI time value.\nThis value is used to calculate the MPI time later. Type Bound timer Arguments Type Intent Optional Attributes Name class( timer ), intent(inout) :: this Called by proc~~mtimer_start~~CalledByGraph proc~mtimer_start fortime::timer%mtimer_start program~test10 test10 program~test10->proc~mtimer_start program~test11 test11 program~test11->proc~mtimer_start program~test12 test12 program~test12->proc~mtimer_start program~test22 test22 program~test22->proc~mtimer_start program~test23 test23 program~test23->proc~mtimer_start program~test24 test24 program~test24->proc~mtimer_start Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code impure subroutine mtimer_start ( this ) ! include 'mpif.h' class ( timer ), intent ( inout ) :: this interface function mpi_wtime () import rk real ( rk ) :: mpi_wtime end function mpi_wtime end interface ! Start the timer this % mpi_start = mpi_wtime () end subroutine mtimer_start","tags":"","loc":"proc/mtimer_start.html"},{"title":"mtimer_stop – ForTime","text":"private impure subroutine mtimer_stop(this, nloops, message, print) Stops the timer and calculates the MPI time.\nOptionally, it can print a message along with the MPI time. Type Bound timer Arguments Type Intent Optional Attributes Name class( timer ), intent(inout) :: this integer, intent(in), optional :: nloops character(len=*), intent(in), optional :: message logical, intent(in), optional :: print Calls proc~~mtimer_stop~~CallsGraph proc~mtimer_stop fortime::timer%mtimer_stop proc~print_time fortime::print_time proc~mtimer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~mtimer_stop~~CalledByGraph proc~mtimer_stop fortime::timer%mtimer_stop program~test10 test10 program~test10->proc~mtimer_stop program~test11 test11 program~test11->proc~mtimer_stop program~test12 test12 program~test12->proc~mtimer_stop program~test22 test22 program~test22->proc~mtimer_stop program~test23 test23 program~test23->proc~mtimer_stop program~test24 test24 program~test24->proc~mtimer_stop Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code impure subroutine mtimer_stop ( this , nloops , message , print ) ! include 'mpif.h' class ( timer ), intent ( inout ) :: this integer , intent ( in ), optional :: nloops character ( * ), intent ( in ), optional :: message character (:), allocatable :: msg logical , intent ( in ), optional :: print interface function mpi_wtime () import rk real ( rk ) :: mpi_wtime end function mpi_wtime end interface ! Stop the timer this % mpi_end = mpi_wtime () ! Calculate the elapsed MPI time this % mpi_elapsed = this % mpi_end - this % mpi_start ! Convert MPI time to seconds if (. not . present ( nloops )) this % mpi_time = this % mpi_elapsed if ( present ( nloops )) this % mpi_time = this % mpi_elapsed / real ( nloops , kind = rk ) ! Print the elapsed time if (. not . present ( message )) then msg = \"MPI time:\" else msg = message end if if ( present ( print )) then if ( print ) call print_time ( this % mpi_time , msg ) else call print_time ( this % mpi_time , msg ) end if ! Deallocate the message if ( allocated ( msg )) deallocate ( msg ) end subroutine mtimer_stop","tags":"","loc":"proc/mtimer_stop.html"},{"title":"mtimer_write – ForTime","text":"private impure subroutine mtimer_write(this, file_name) Writes the MPI time to a file. Type Bound timer Arguments Type Intent Optional Attributes Name class( timer ), intent(in) :: this character(len=*), intent(in) :: file_name Called by proc~~mtimer_write~~CalledByGraph proc~mtimer_write fortime::timer%mtimer_write program~test11 test11 program~test11->proc~mtimer_write program~test12 test12 program~test12->proc~mtimer_write program~test23 test23 program~test23->proc~mtimer_write program~test24 test24 program~test24->proc~mtimer_write Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code impure subroutine mtimer_write ( this , file_name ) class ( timer ), intent ( in ) :: this character ( * ), intent ( in ) :: file_name logical :: file_exists integer :: nunit ! Check if the file exists inquire ( file = file_name , exist = file_exists ) ! Open the file in appropriate mode if ( file_exists ) then open ( newunit = nunit , file = file_name , status = 'old' , action = 'write' , position = 'append' ) else open ( newunit = nunit , file = file_name , status = 'new' , action = 'write' ) end if ! Write the MPI time to the file write ( nunit , '(g0)' ) this % mpi_time ! Close the file close ( nunit ) end subroutine mtimer_write","tags":"","loc":"proc/mtimer_write.html"},{"title":"print_time – ForTime","text":"private impure subroutine print_time(time, message) Arguments Type Intent Optional Attributes Name real(kind=rk), intent(in) :: time character(len=*), intent(in) :: message Called by proc~~print_time~~CalledByGraph proc~print_time fortime::print_time proc~ctimer_stop fortime::timer%ctimer_stop proc~ctimer_stop->proc~print_time proc~mtimer_stop fortime::timer%mtimer_stop proc~mtimer_stop->proc~print_time proc~otimer_stop fortime::timer%otimer_stop proc~otimer_stop->proc~print_time proc~timer_stop fortime::timer%timer_stop proc~timer_stop->proc~print_time program~example1 example1 program~example1->proc~timer_stop program~example2 example2 program~example2->proc~timer_stop program~example3 example3 program~example3->proc~ctimer_stop program~example4 example4 program~example4->proc~ctimer_stop program~test1 test1 program~test1->proc~timer_stop program~test10 test10 program~test10->proc~mtimer_stop program~test11 test11 program~test11->proc~mtimer_stop program~test12 test12 program~test12->proc~mtimer_stop program~test13 test13 program~test13->proc~timer_stop program~test14 test14 program~test14->proc~timer_stop program~test15 test15 program~test15->proc~timer_stop program~test16 test16 program~test16->proc~ctimer_stop program~test17 test17 program~test17->proc~ctimer_stop program~test18 test18 program~test18->proc~ctimer_stop program~test19 test19 program~test19->proc~otimer_stop program~test2 test2 program~test2->proc~timer_stop program~test20 test20 program~test20->proc~otimer_stop program~test21 test21 program~test21->proc~otimer_stop program~test22 test22 program~test22->proc~mtimer_stop program~test23 test23 program~test23->proc~mtimer_stop program~test24 test24 program~test24->proc~mtimer_stop program~test3 test3 program~test3->proc~timer_stop program~test4 test4 program~test4->proc~ctimer_stop program~test5 test5 program~test5->proc~ctimer_stop program~test6 test6 program~test6->proc~ctimer_stop program~test7 test7 program~test7->proc~otimer_stop program~test8 test8 program~test8->proc~otimer_stop program~test9 test9 program~test9->proc~otimer_stop Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code impure subroutine print_time ( time , message ) real ( rk ), intent ( in ) :: time character ( * ), intent ( in ) :: message print '(A, F16.9, \" [s]\")' , trim ( message ), time end subroutine print_time","tags":"","loc":"proc/print_time.html"},{"title":"fortime – ForTime","text":"This module provides a timer object for measuring elapsed time.\nIt includes procedures for starting and stopping the timer, as well\nas calculating and printing the elapsed time in seconds. Uses kinds module~~fortime~~UsesGraph module~fortime fortime kinds kinds module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~fortime~~UsedByGraph module~fortime fortime program~example1 example1 program~example1->module~fortime program~example2 example2 program~example2->module~fortime program~example3 example3 program~example3->module~fortime program~example4 example4 program~example4->module~fortime program~test1 test1 program~test1->module~fortime program~test10 test10 program~test10->module~fortime program~test11 test11 program~test11->module~fortime program~test12 test12 program~test12->module~fortime program~test13 test13 program~test13->module~fortime program~test14 test14 program~test14->module~fortime program~test15 test15 program~test15->module~fortime program~test16 test16 program~test16->module~fortime program~test17 test17 program~test17->module~fortime program~test18 test18 program~test18->module~fortime program~test19 test19 program~test19->module~fortime program~test2 test2 program~test2->module~fortime program~test20 test20 program~test20->module~fortime program~test21 test21 program~test21->module~fortime program~test22 test22 program~test22->module~fortime program~test23 test23 program~test23->module~fortime program~test24 test24 program~test24->module~fortime program~test3 test3 program~test3->module~fortime program~test4 test4 program~test4->module~fortime program~test5 test5 program~test5->module~fortime program~test6 test6 program~test6->module~fortime program~test7 test7 program~test7->module~fortime program~test8 test8 program~test8->module~fortime program~test9 test9 program~test9->module~fortime Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Derived Types type, public :: timer Components Type Visibility Attributes Name Initial integer, private :: clock_rate integer, private :: clock_start integer, private :: clock_end integer, private :: clock_elapsed real(kind=rk), public :: elapsed_time real(kind=rk), private :: cpu_start real(kind=rk), private :: cpu_end real(kind=rk), private :: cpu_elapsed real(kind=rk), public :: cpu_time real(kind=rk), private :: omp_start real(kind=rk), private :: omp_end real(kind=rk), private :: omp_elapsed real(kind=rk), public :: omp_time real(kind=rk), private :: mpi_start real(kind=rk), private :: mpi_end real(kind=rk), private :: mpi_elapsed real(kind=rk), public :: mpi_time Type-Bound Procedures procedure, public :: timer_start procedure, public :: timer_stop procedure, public :: timer_write procedure, public :: ctimer_start procedure, public :: ctimer_stop procedure, public :: ctimer_write procedure, public :: otimer_start procedure, public :: otimer_stop procedure, public :: otimer_write procedure, public :: mtimer_start procedure, public :: mtimer_stop procedure, public :: mtimer_write Subroutines public impure subroutine timer_start (this) Author Seyed Ali Ghasemi Starts the timer by recording the current processor clock value.\nThis value is used to calculate the elapsed time later. Arguments Type Intent Optional Attributes Name class( timer ), intent(inout) :: this public impure subroutine timer_stop (this, nloops, message, print) Author Seyed Ali Ghasemi Stops the timer and calculates the elapsed time.\nOptionally, it can print a message along with the elapsed time. Arguments Type Intent Optional Attributes Name class( timer ), intent(inout) :: this integer, intent(in), optional :: nloops character(len=*), intent(in), optional :: message logical, intent(in), optional :: print private impure subroutine timer_write (this, file_name) Author Seyed Ali Ghasemi Writes the elapsed time to a file. Arguments Type Intent Optional Attributes Name class( timer ), intent(in) :: this character(len=*), intent(in) :: file_name private impure subroutine ctimer_start (this) Author Seyed Ali Ghasemi Starts the timer by recording the current CPU time value.\nThis value is used to calculate the CPU time later. Arguments Type Intent Optional Attributes Name class( timer ), intent(inout) :: this private impure subroutine ctimer_stop (this, nloops, message, print) Author Seyed Ali Ghasemi Stops the timer and calculates the CPU time.\nOptionally, it can print a message along with the CPU time. Arguments Type Intent Optional Attributes Name class( timer ), intent(inout) :: this integer, intent(in), optional :: nloops character(len=*), intent(in), optional :: message logical, intent(in), optional :: print private impure subroutine ctimer_write (this, file_name) Author Seyed Ali Ghasemi Writes the CPU time to a file. Arguments Type Intent Optional Attributes Name class( timer ), intent(in) :: this character(len=*), intent(in) :: file_name private impure subroutine otimer_start (this) Author Seyed Ali Ghasemi Starts the timer by recording the current OMP time value.\nThis value is used to calculate the OMP time later. Arguments Type Intent Optional Attributes Name class( timer ), intent(inout) :: this private impure subroutine otimer_stop (this, nloops, message, print) Author Seyed Ali Ghasemi Stops the timer and calculates the OMP time.\nOptionally, it can print a message along with the OMP time. Arguments Type Intent Optional Attributes Name class( timer ), intent(inout) :: this integer, intent(in), optional :: nloops character(len=*), intent(in), optional :: message logical, intent(in), optional :: print private impure subroutine otimer_write (this, file_name) Author Seyed Ali Ghasemi Writes the OMP time to a file. Arguments Type Intent Optional Attributes Name class( timer ), intent(in) :: this character(len=*), intent(in) :: file_name private impure subroutine mtimer_start (this) Author Seyed Ali Ghasemi Starts the timer by recording the current MPI time value.\nThis value is used to calculate the MPI time later. Arguments Type Intent Optional Attributes Name class( timer ), intent(inout) :: this private impure subroutine mtimer_stop (this, nloops, message, print) Author Seyed Ali Ghasemi Stops the timer and calculates the MPI time.\nOptionally, it can print a message along with the MPI time. Arguments Type Intent Optional Attributes Name class( timer ), intent(inout) :: this integer, intent(in), optional :: nloops character(len=*), intent(in), optional :: message logical, intent(in), optional :: print private impure subroutine mtimer_write (this, file_name) Author Seyed Ali Ghasemi Writes the MPI time to a file. Arguments Type Intent Optional Attributes Name class( timer ), intent(in) :: this character(len=*), intent(in) :: file_name private impure subroutine print_time (time, message) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name real(kind=rk), intent(in) :: time character(len=*), intent(in) :: message","tags":"","loc":"module/fortime.html"},{"title":"test9 – ForTime","text":"Uses forunittest kinds fortime program~~test9~~UsesGraph program~test9 test9 forunittest forunittest program~test9->forunittest kinds kinds program~test9->kinds module~fortime fortime program~test9->module~fortime module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test9~~CallsGraph program~test9 test9 check check program~test9->check proc~otimer_start fortime::timer%otimer_start program~test9->proc~otimer_start proc~otimer_stop fortime::timer%otimer_stop program~test9->proc~otimer_stop proc~otimer_write fortime::timer%otimer_write program~test9->proc~otimer_write omp_get_wtime omp_get_wtime proc~otimer_start->omp_get_wtime proc~otimer_stop->omp_get_wtime proc~print_time fortime::print_time proc~otimer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t type(unit_test) :: ut integer :: nl integer :: nloops = 3 Source Code program test9 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: nl , nloops = 3 #if defined(USE_OMP) ! OMP time with nloops call t % otimer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % otimer_stop ( message = 'OMP time:' ) call t % otimer_write ( 'test/test9_otimes' ) ! Optionally, write the elapsed time to a file call ut % check ( res = t % omp_time , expected = real ( nloops , rk ) * 1.0_rk , tol = 1.0e-1_rk , msg = 'test9' ) #endif end program test9","tags":"","loc":"program/test9.html"},{"title":"test22 – ForTime","text":"Uses forunittest kinds fortime program~~test22~~UsesGraph program~test22 test22 forunittest forunittest program~test22->forunittest kinds kinds program~test22->kinds module~fortime fortime program~test22->module~fortime module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test22~~CallsGraph program~test22 test22 check check program~test22->check mpi_finalize mpi_finalize program~test22->mpi_finalize mpi_init mpi_init program~test22->mpi_init proc~mtimer_start fortime::timer%mtimer_start program~test22->proc~mtimer_start proc~mtimer_stop fortime::timer%mtimer_stop program~test22->proc~mtimer_stop proc~print_time fortime::print_time proc~mtimer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t type(unit_test) :: ut integer :: ierr Source Code program test22 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: ierr #if defined(USE_MPI) ! MPI time call mpi_init ( ierr ) call t % mtimer_start () call sleep ( 1 ) ! Perform operations here call t % mtimer_stop ( print = . false .) call mpi_finalize ( ierr ) call ut % check ( res = t % mpi_time , expected = 1.0_rk , tol = 1.0e-1_rk , msg = 'test22' ) #endif end program test22","tags":"","loc":"program/test22.html"},{"title":"test10 – ForTime","text":"Uses forunittest kinds fortime program~~test10~~UsesGraph program~test10 test10 forunittest forunittest program~test10->forunittest kinds kinds program~test10->kinds module~fortime fortime program~test10->module~fortime module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test10~~CallsGraph program~test10 test10 check check program~test10->check mpi_finalize mpi_finalize program~test10->mpi_finalize mpi_init mpi_init program~test10->mpi_init proc~mtimer_start fortime::timer%mtimer_start program~test10->proc~mtimer_start proc~mtimer_stop fortime::timer%mtimer_stop program~test10->proc~mtimer_stop proc~print_time fortime::print_time proc~mtimer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t type(unit_test) :: ut integer :: ierr Source Code program test10 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: ierr #if defined(USE_MPI) ! MPI time call mpi_init ( ierr ) call t % mtimer_start () call sleep ( 1 ) ! Perform operations here call t % mtimer_stop () call mpi_finalize ( ierr ) call ut % check ( res = t % mpi_time , expected = 1.0_rk , tol = 1.0e-1_rk , msg = 'test10' ) #endif end program test10","tags":"","loc":"program/test10.html"},{"title":"test12 – ForTime","text":"Uses forunittest kinds fortime program~~test12~~UsesGraph program~test12 test12 forunittest forunittest program~test12->forunittest kinds kinds program~test12->kinds module~fortime fortime program~test12->module~fortime module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test12~~CallsGraph program~test12 test12 check check program~test12->check mpi_finalize mpi_finalize program~test12->mpi_finalize mpi_init mpi_init program~test12->mpi_init proc~mtimer_start fortime::timer%mtimer_start program~test12->proc~mtimer_start proc~mtimer_stop fortime::timer%mtimer_stop program~test12->proc~mtimer_stop proc~mtimer_write fortime::timer%mtimer_write program~test12->proc~mtimer_write proc~print_time fortime::print_time proc~mtimer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t type(unit_test) :: ut integer :: nl integer :: nloops = 3 integer :: ierr Source Code program test12 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: nl , nloops = 3 integer :: ierr #if defined(USE_MPI) ! MPI time with nloops call mpi_init ( ierr ) call t % mtimer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % mtimer_stop ( message = 'MPI time:' ) call mpi_finalize ( ierr ) call t % mtimer_write ( 'test/test12_mtimes' ) ! Optionally, write the elapsed time to a file call ut % check ( res = t % mpi_time , expected = real ( nloops , rk ) * 1.0_rk , tol = 1.0e-1_rk , msg = 'test12' ) #endif end program test12","tags":"","loc":"program/test12.html"},{"title":"test2 – ForTime","text":"Uses forunittest kinds fortime program~~test2~~UsesGraph program~test2 test2 forunittest forunittest program~test2->forunittest kinds kinds program~test2->kinds module~fortime fortime program~test2->module~fortime module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test2~~CallsGraph program~test2 test2 check check program~test2->check proc~timer_start fortime::timer%timer_start program~test2->proc~timer_start proc~timer_stop fortime::timer%timer_stop program~test2->proc~timer_stop proc~timer_write fortime::timer%timer_write program~test2->proc~timer_write proc~print_time fortime::print_time proc~timer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t type(unit_test) :: ut integer :: nl integer :: nloops = 3 Source Code program test2 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: nl , nloops = 3 ! Elapsed time with nloops call t % timer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % timer_stop ( nloops = nloops , message = 'Elapsed time:' ) call t % timer_write ( 'test/test2_etimes' ) ! Optionally, write the elapsed time to a file call ut % check ( res = t % elapsed_time , expected = 1.0_rk , tol = 1.0e-1_rk , msg = 'test2' ) end program test2","tags":"","loc":"program/test2.html"},{"title":"test13 – ForTime","text":"Uses forunittest kinds fortime program~~test13~~UsesGraph program~test13 test13 forunittest forunittest program~test13->forunittest kinds kinds program~test13->kinds module~fortime fortime program~test13->module~fortime module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test13~~CallsGraph program~test13 test13 check check program~test13->check proc~timer_start fortime::timer%timer_start program~test13->proc~timer_start proc~timer_stop fortime::timer%timer_stop program~test13->proc~timer_stop proc~print_time fortime::print_time proc~timer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t type(unit_test) :: ut Source Code program test13 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut ! Elapsed time call t % timer_start () call sleep ( 1 ) ! Perform operations here call t % timer_stop ( print = . false .) call ut % check ( res = t % elapsed_time , expected = 1.0_rk , tol = 1.0e-1_rk , msg = 'test13' ) end program test13","tags":"","loc":"program/test13.html"},{"title":"test3 – ForTime","text":"Uses forunittest kinds fortime program~~test3~~UsesGraph program~test3 test3 forunittest forunittest program~test3->forunittest kinds kinds program~test3->kinds module~fortime fortime program~test3->module~fortime module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test3~~CallsGraph program~test3 test3 check check program~test3->check proc~timer_start fortime::timer%timer_start program~test3->proc~timer_start proc~timer_stop fortime::timer%timer_stop program~test3->proc~timer_stop proc~timer_write fortime::timer%timer_write program~test3->proc~timer_write proc~print_time fortime::print_time proc~timer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t type(unit_test) :: ut integer :: nl integer :: nloops = 3 Source Code program test3 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: nl , nloops = 3 ! Elapsed time with nloops call t % timer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % timer_stop ( message = 'Elapsed time:' ) call t % timer_write ( 'test/test3_etimes' ) ! Optionally, write the elapsed time to a file call ut % check ( res = t % elapsed_time , expected = real ( nloops , rk ) * 1.0_rk , tol = 1.0e-1_rk , msg = 'test3' ) end program test3","tags":"","loc":"program/test3.html"},{"title":"test8 – ForTime","text":"Uses forunittest kinds fortime program~~test8~~UsesGraph program~test8 test8 forunittest forunittest program~test8->forunittest kinds kinds program~test8->kinds module~fortime fortime program~test8->module~fortime module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test8~~CallsGraph program~test8 test8 check check program~test8->check proc~otimer_start fortime::timer%otimer_start program~test8->proc~otimer_start proc~otimer_stop fortime::timer%otimer_stop program~test8->proc~otimer_stop proc~otimer_write fortime::timer%otimer_write program~test8->proc~otimer_write omp_get_wtime omp_get_wtime proc~otimer_start->omp_get_wtime proc~otimer_stop->omp_get_wtime proc~print_time fortime::print_time proc~otimer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t type(unit_test) :: ut integer :: nl integer :: nloops = 3 Source Code program test8 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: nl , nloops = 3 #if defined(USE_OMP) ! OMP time with nloops call t % otimer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % otimer_stop ( nloops = nloops , message = 'OMP time:' ) call t % otimer_write ( 'test/test8_otimes' ) ! Optionally, write the elapsed time to a file call ut % check ( res = t % omp_time , expected = 1.0_rk , tol = 1.0e-1_rk , msg = 'test8' ) #endif end program test8","tags":"","loc":"program/test8.html"},{"title":"test23 – ForTime","text":"Uses forunittest kinds fortime program~~test23~~UsesGraph program~test23 test23 forunittest forunittest program~test23->forunittest kinds kinds program~test23->kinds module~fortime fortime program~test23->module~fortime module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test23~~CallsGraph program~test23 test23 check check program~test23->check mpi_finalize mpi_finalize program~test23->mpi_finalize mpi_init mpi_init program~test23->mpi_init proc~mtimer_start fortime::timer%mtimer_start program~test23->proc~mtimer_start proc~mtimer_stop fortime::timer%mtimer_stop program~test23->proc~mtimer_stop proc~mtimer_write fortime::timer%mtimer_write program~test23->proc~mtimer_write proc~print_time fortime::print_time proc~mtimer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t type(unit_test) :: ut integer :: nl integer :: nloops = 3 integer :: ierr Source Code program test23 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: nl , nloops = 3 integer :: ierr #if defined(USE_MPI) ! MPI time with nloops call mpi_init ( ierr ) call t % mtimer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % mtimer_stop ( nloops = nloops , message = 'MPI time:' , print = . false .) call mpi_finalize ( ierr ) call t % mtimer_write ( 'test/test23_mtimes' ) ! Optionally, write the elapsed time to a file call ut % check ( res = t % mpi_time , expected = 1.0_rk , tol = 1.0e-1_rk , msg = 'test23' ) #endif end program test23","tags":"","loc":"program/test23.html"},{"title":"example2 – ForTime","text":"Uses fortime program~~example2~~UsesGraph program~example2 example2 module~fortime fortime program~example2->module~fortime kinds kinds module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~example2~~CallsGraph program~example2 example2 proc~timer_start fortime::timer%timer_start program~example2->proc~timer_start proc~timer_stop fortime::timer%timer_stop program~example2->proc~timer_stop proc~timer_write fortime::timer%timer_write program~example2->proc~timer_write proc~print_time fortime::print_time proc~timer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t integer :: nl integer :: nloops = 3 Source Code program example2 use fortime implicit none type ( timer ) :: t integer :: nl , nloops = 3 call t % timer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % timer_stop ( nloops = nloops , message = 'Elapsed time:' , print = . true .) ! nloops, message and print are optional. call t % timer_write ( 'example/example2_etimes' ) ! Optionally, write the elapsed time to a file end program example2","tags":"","loc":"program/example2.html"},{"title":"test7 – ForTime","text":"Uses forunittest kinds fortime program~~test7~~UsesGraph program~test7 test7 forunittest forunittest program~test7->forunittest kinds kinds program~test7->kinds module~fortime fortime program~test7->module~fortime module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test7~~CallsGraph program~test7 test7 check check program~test7->check proc~otimer_start fortime::timer%otimer_start program~test7->proc~otimer_start proc~otimer_stop fortime::timer%otimer_stop program~test7->proc~otimer_stop omp_get_wtime omp_get_wtime proc~otimer_start->omp_get_wtime proc~otimer_stop->omp_get_wtime proc~print_time fortime::print_time proc~otimer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t type(unit_test) :: ut Source Code program test7 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut #if defined(USE_OMP) ! OMP time call t % otimer_start () call sleep ( 1 ) ! Perform operations here call t % otimer_stop () call ut % check ( res = t % omp_time , expected = 1.0_rk , tol = 1.0e-1_rk , msg = 'test7' ) #endif end program test7","tags":"","loc":"program/test7.html"},{"title":"test16 – ForTime","text":"Uses kinds fortime program~~test16~~UsesGraph program~test16 test16 kinds kinds program~test16->kinds module~fortime fortime program~test16->module~fortime module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test16~~CallsGraph program~test16 test16 proc~ctimer_start fortime::timer%ctimer_start program~test16->proc~ctimer_start proc~ctimer_stop fortime::timer%ctimer_stop program~test16->proc~ctimer_stop proc~print_time fortime::print_time proc~ctimer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t Source Code program test16 use kinds use fortime implicit none type ( timer ) :: t ! CPU time call t % ctimer_start () call sleep ( 1 ) ! Perform operations here call t % ctimer_stop ( print = . false .) end program test16","tags":"","loc":"program/test16.html"},{"title":"test6 – ForTime","text":"Uses kinds fortime program~~test6~~UsesGraph program~test6 test6 kinds kinds program~test6->kinds module~fortime fortime program~test6->module~fortime module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test6~~CallsGraph program~test6 test6 proc~ctimer_start fortime::timer%ctimer_start program~test6->proc~ctimer_start proc~ctimer_stop fortime::timer%ctimer_stop program~test6->proc~ctimer_stop proc~ctimer_write fortime::timer%ctimer_write program~test6->proc~ctimer_write proc~print_time fortime::print_time proc~ctimer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t integer :: nl integer :: nloops = 3 Source Code program test6 use kinds use fortime implicit none type ( timer ) :: t integer :: nl , nloops = 3 ! CPU time with nloops call t % ctimer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % ctimer_stop ( message = 'CPU time:' ) call t % ctimer_write ( 'test/test6_ctimes' ) ! Optionally, write the elapsed time to a file end program test6","tags":"","loc":"program/test6.html"},{"title":"test20 – ForTime","text":"Uses forunittest kinds fortime program~~test20~~UsesGraph program~test20 test20 forunittest forunittest program~test20->forunittest kinds kinds program~test20->kinds module~fortime fortime program~test20->module~fortime module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test20~~CallsGraph program~test20 test20 check check program~test20->check proc~otimer_start fortime::timer%otimer_start program~test20->proc~otimer_start proc~otimer_stop fortime::timer%otimer_stop program~test20->proc~otimer_stop proc~otimer_write fortime::timer%otimer_write program~test20->proc~otimer_write omp_get_wtime omp_get_wtime proc~otimer_start->omp_get_wtime proc~otimer_stop->omp_get_wtime proc~print_time fortime::print_time proc~otimer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t type(unit_test) :: ut integer :: nl integer :: nloops = 3 Source Code program test20 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: nl , nloops = 3 #if defined(USE_OMP) ! OMP time with nloops call t % otimer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % otimer_stop ( nloops = nloops , message = 'OMP time:' , print = . false .) call t % otimer_write ( 'test/test20_otimes' ) ! Optionally, write the elapsed time to a file call ut % check ( res = t % omp_time , expected = 1.0_rk , tol = 1.0e-1_rk , msg = 'test20' ) #endif end program test20","tags":"","loc":"program/test20.html"},{"title":"example3 – ForTime","text":"Uses fortime program~~example3~~UsesGraph program~example3 example3 module~fortime fortime program~example3->module~fortime kinds kinds module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~example3~~CallsGraph program~example3 example3 proc~ctimer_start fortime::timer%ctimer_start program~example3->proc~ctimer_start proc~ctimer_stop fortime::timer%ctimer_stop program~example3->proc~ctimer_stop proc~print_time fortime::print_time proc~ctimer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t Source Code program example3 use fortime implicit none type ( timer ) :: t call t % ctimer_start () call sleep ( 1 ) ! Perform operations here call t % ctimer_stop () end program example3","tags":"","loc":"program/example3.html"},{"title":"test11 – ForTime","text":"Uses forunittest kinds fortime program~~test11~~UsesGraph program~test11 test11 forunittest forunittest program~test11->forunittest kinds kinds program~test11->kinds module~fortime fortime program~test11->module~fortime module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test11~~CallsGraph program~test11 test11 check check program~test11->check mpi_finalize mpi_finalize program~test11->mpi_finalize mpi_init mpi_init program~test11->mpi_init proc~mtimer_start fortime::timer%mtimer_start program~test11->proc~mtimer_start proc~mtimer_stop fortime::timer%mtimer_stop program~test11->proc~mtimer_stop proc~mtimer_write fortime::timer%mtimer_write program~test11->proc~mtimer_write proc~print_time fortime::print_time proc~mtimer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t type(unit_test) :: ut integer :: nl integer :: nloops = 3 integer :: ierr Source Code program test11 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: nl , nloops = 3 integer :: ierr #if defined(USE_MPI) ! MPI time with nloops call mpi_init ( ierr ) call t % mtimer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % mtimer_stop ( nloops = nloops , message = 'MPI time:' ) call mpi_finalize ( ierr ) call t % mtimer_write ( 'test/test11_mtimes' ) ! Optionally, write the elapsed time to a file call ut % check ( res = t % mpi_time , expected = 1.0_rk , tol = 1.0e-1_rk , msg = 'test11' ) #endif end program test11","tags":"","loc":"program/test11.html"},{"title":"test15 – ForTime","text":"Uses forunittest kinds fortime program~~test15~~UsesGraph program~test15 test15 forunittest forunittest program~test15->forunittest kinds kinds program~test15->kinds module~fortime fortime program~test15->module~fortime module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test15~~CallsGraph program~test15 test15 check check program~test15->check proc~timer_start fortime::timer%timer_start program~test15->proc~timer_start proc~timer_stop fortime::timer%timer_stop program~test15->proc~timer_stop proc~timer_write fortime::timer%timer_write program~test15->proc~timer_write proc~print_time fortime::print_time proc~timer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t type(unit_test) :: ut integer :: nl integer :: nloops = 3 Source Code program test15 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: nl , nloops = 3 ! Elapsed time with nloops call t % timer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % timer_stop ( message = 'Elapsed time:' , print = . false .) call t % timer_write ( 'test/test15_etimes' ) ! Optionally, write the elapsed time to a file call ut % check ( res = t % elapsed_time , expected = real ( nloops , rk ) * 1.0_rk , tol = 1.0e-1_rk , msg = 'test15' ) end program test15","tags":"","loc":"program/test15.html"},{"title":"test24 – ForTime","text":"Uses forunittest kinds fortime program~~test24~~UsesGraph program~test24 test24 forunittest forunittest program~test24->forunittest kinds kinds program~test24->kinds module~fortime fortime program~test24->module~fortime module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test24~~CallsGraph program~test24 test24 check check program~test24->check mpi_finalize mpi_finalize program~test24->mpi_finalize mpi_init mpi_init program~test24->mpi_init proc~mtimer_start fortime::timer%mtimer_start program~test24->proc~mtimer_start proc~mtimer_stop fortime::timer%mtimer_stop program~test24->proc~mtimer_stop proc~mtimer_write fortime::timer%mtimer_write program~test24->proc~mtimer_write proc~print_time fortime::print_time proc~mtimer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t type(unit_test) :: ut integer :: nl integer :: nloops = 3 integer :: ierr Source Code program test24 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: nl , nloops = 3 integer :: ierr #if defined(USE_MPI) ! MPI time with nloops call mpi_init ( ierr ) call t % mtimer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % mtimer_stop ( message = 'MPI time:' , print = . false .) call mpi_finalize ( ierr ) call t % mtimer_write ( 'test/test24_mtimes' ) ! Optionally, write the elapsed time to a file call ut % check ( res = t % mpi_time , expected = real ( nloops , rk ) * 1.0_rk , tol = 1.0e-1_rk , msg = 'test24' ) #endif end program test24","tags":"","loc":"program/test24.html"},{"title":"test5 – ForTime","text":"Uses kinds fortime program~~test5~~UsesGraph program~test5 test5 kinds kinds program~test5->kinds module~fortime fortime program~test5->module~fortime module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test5~~CallsGraph program~test5 test5 proc~ctimer_start fortime::timer%ctimer_start program~test5->proc~ctimer_start proc~ctimer_stop fortime::timer%ctimer_stop program~test5->proc~ctimer_stop proc~ctimer_write fortime::timer%ctimer_write program~test5->proc~ctimer_write proc~print_time fortime::print_time proc~ctimer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t integer :: nl integer :: nloops = 3 Source Code program test5 use kinds use fortime implicit none type ( timer ) :: t integer :: nl , nloops = 3 ! CPU time with nloops call t % ctimer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % ctimer_stop ( nloops = nloops , message = 'CPU time:' ) call t % ctimer_write ( 'test/test5_ctimes' ) ! Optionally, write the elapsed time to a file end program test5","tags":"","loc":"program/test5.html"},{"title":"test14 – ForTime","text":"Uses forunittest kinds fortime program~~test14~~UsesGraph program~test14 test14 forunittest forunittest program~test14->forunittest kinds kinds program~test14->kinds module~fortime fortime program~test14->module~fortime module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test14~~CallsGraph program~test14 test14 check check program~test14->check proc~timer_start fortime::timer%timer_start program~test14->proc~timer_start proc~timer_stop fortime::timer%timer_stop program~test14->proc~timer_stop proc~timer_write fortime::timer%timer_write program~test14->proc~timer_write proc~print_time fortime::print_time proc~timer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t type(unit_test) :: ut integer :: nl integer :: nloops = 3 Source Code program test14 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: nl , nloops = 3 ! Elapsed time with nloops call t % timer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % timer_stop ( nloops = nloops , message = 'Elapsed time:' , print = . false .) call t % timer_write ( 'test/test14_etimes' ) ! Optionally, write the elapsed time to a file call ut % check ( res = t % elapsed_time , expected = 1.0_rk , tol = 1.0e-1_rk , msg = 'test14' ) end program test14","tags":"","loc":"program/test14.html"},{"title":"test4 – ForTime","text":"Uses kinds fortime program~~test4~~UsesGraph program~test4 test4 kinds kinds program~test4->kinds module~fortime fortime program~test4->module~fortime module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test4~~CallsGraph program~test4 test4 proc~ctimer_start fortime::timer%ctimer_start program~test4->proc~ctimer_start proc~ctimer_stop fortime::timer%ctimer_stop program~test4->proc~ctimer_stop proc~print_time fortime::print_time proc~ctimer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t Source Code program test4 use kinds use fortime implicit none type ( timer ) :: t ! CPU time call t % ctimer_start () call sleep ( 1 ) ! Perform operations here call t % ctimer_stop () end program test4","tags":"","loc":"program/test4.html"},{"title":"test19 – ForTime","text":"Uses forunittest kinds fortime program~~test19~~UsesGraph program~test19 test19 forunittest forunittest program~test19->forunittest kinds kinds program~test19->kinds module~fortime fortime program~test19->module~fortime module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test19~~CallsGraph program~test19 test19 check check program~test19->check proc~otimer_start fortime::timer%otimer_start program~test19->proc~otimer_start proc~otimer_stop fortime::timer%otimer_stop program~test19->proc~otimer_stop omp_get_wtime omp_get_wtime proc~otimer_start->omp_get_wtime proc~otimer_stop->omp_get_wtime proc~print_time fortime::print_time proc~otimer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t type(unit_test) :: ut Source Code program test19 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut #if defined(USE_OMP) ! OMP time call t % otimer_start () call sleep ( 1 ) ! Perform operations here call t % otimer_stop ( print = . false .) call ut % check ( res = t % omp_time , expected = 1.0_rk , tol = 1.0e-1_rk , msg = 'test19' ) #endif end program test19","tags":"","loc":"program/test19.html"},{"title":"test18 – ForTime","text":"Uses kinds fortime program~~test18~~UsesGraph program~test18 test18 kinds kinds program~test18->kinds module~fortime fortime program~test18->module~fortime module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test18~~CallsGraph program~test18 test18 proc~ctimer_start fortime::timer%ctimer_start program~test18->proc~ctimer_start proc~ctimer_stop fortime::timer%ctimer_stop program~test18->proc~ctimer_stop proc~ctimer_write fortime::timer%ctimer_write program~test18->proc~ctimer_write proc~print_time fortime::print_time proc~ctimer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t integer :: nl integer :: nloops = 3 Source Code program test18 use kinds use fortime implicit none type ( timer ) :: t integer :: nl , nloops = 3 ! CPU time with nloops call t % ctimer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % ctimer_stop ( message = 'CPU time:' , print = . false .) call t % ctimer_write ( 'test/test18_ctimes' ) ! Optionally, write the elapsed time to a file end program test18","tags":"","loc":"program/test18.html"},{"title":"test1 – ForTime","text":"Uses forunittest kinds fortime program~~test1~~UsesGraph program~test1 test1 forunittest forunittest program~test1->forunittest kinds kinds program~test1->kinds module~fortime fortime program~test1->module~fortime module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test1~~CallsGraph program~test1 test1 check check program~test1->check proc~timer_start fortime::timer%timer_start program~test1->proc~timer_start proc~timer_stop fortime::timer%timer_stop program~test1->proc~timer_stop proc~print_time fortime::print_time proc~timer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t type(unit_test) :: ut Source Code program test1 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut ! Elapsed time call t % timer_start () call sleep ( 1 ) ! Perform operations here call t % timer_stop () call ut % check ( res = t % elapsed_time , expected = 1.0_rk , tol = 1.0e-1_rk , msg = 'test1' ) end program test1","tags":"","loc":"program/test1.html"},{"title":"example4 – ForTime","text":"Uses fortime program~~example4~~UsesGraph program~example4 example4 module~fortime fortime program~example4->module~fortime kinds kinds module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~example4~~CallsGraph program~example4 example4 proc~ctimer_start fortime::timer%ctimer_start program~example4->proc~ctimer_start proc~ctimer_stop fortime::timer%ctimer_stop program~example4->proc~ctimer_stop proc~ctimer_write fortime::timer%ctimer_write program~example4->proc~ctimer_write proc~print_time fortime::print_time proc~ctimer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t integer :: nl integer :: nloops = 3 Source Code program example4 use fortime implicit none type ( timer ) :: t integer :: nl , nloops = 3 call t % ctimer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % ctimer_stop ( nloops = nloops , message = 'CPU time:' , print = . true .) ! nloops, message and print are optional call t % ctimer_write ( 'example/example4_ctimes' ) ! Optionally, write the elapsed time to a file end program example4","tags":"","loc":"program/example4.html"},{"title":"example1 – ForTime","text":"Uses fortime program~~example1~~UsesGraph program~example1 example1 module~fortime fortime program~example1->module~fortime kinds kinds module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~example1~~CallsGraph program~example1 example1 proc~timer_start fortime::timer%timer_start program~example1->proc~timer_start proc~timer_stop fortime::timer%timer_stop program~example1->proc~timer_stop proc~print_time fortime::print_time proc~timer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t Source Code program example1 use fortime implicit none type ( timer ) :: t call t % timer_start () call sleep ( 1 ) ! Perform operations here call t % timer_stop () end program example1","tags":"","loc":"program/example1.html"},{"title":"test17 – ForTime","text":"Uses kinds fortime program~~test17~~UsesGraph program~test17 test17 kinds kinds program~test17->kinds module~fortime fortime program~test17->module~fortime module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test17~~CallsGraph program~test17 test17 proc~ctimer_start fortime::timer%ctimer_start program~test17->proc~ctimer_start proc~ctimer_stop fortime::timer%ctimer_stop program~test17->proc~ctimer_stop proc~ctimer_write fortime::timer%ctimer_write program~test17->proc~ctimer_write proc~print_time fortime::print_time proc~ctimer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t integer :: nl integer :: nloops = 3 Source Code program test17 use kinds use fortime implicit none type ( timer ) :: t integer :: nl , nloops = 3 ! CPU time with nloops call t % ctimer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % ctimer_stop ( nloops = nloops , message = 'CPU time:' , print = . false .) call t % ctimer_write ( 'test/test17_ctimes' ) ! Optionally, write the elapsed time to a file end program test17","tags":"","loc":"program/test17.html"},{"title":"test21 – ForTime","text":"Uses forunittest kinds fortime program~~test21~~UsesGraph program~test21 test21 forunittest forunittest program~test21->forunittest kinds kinds program~test21->kinds module~fortime fortime program~test21->module~fortime module~fortime->kinds Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Calls program~~test21~~CallsGraph program~test21 test21 check check program~test21->check proc~otimer_start fortime::timer%otimer_start program~test21->proc~otimer_start proc~otimer_stop fortime::timer%otimer_stop program~test21->proc~otimer_stop proc~otimer_write fortime::timer%otimer_write program~test21->proc~otimer_write omp_get_wtime omp_get_wtime proc~otimer_start->omp_get_wtime proc~otimer_stop->omp_get_wtime proc~print_time fortime::print_time proc~otimer_stop->proc~print_time Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Attributes Name Initial type( timer ) :: t type(unit_test) :: ut integer :: nl integer :: nloops = 3 Source Code program test21 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: nl , nloops = 3 #if defined(USE_OMP) ! OMP time with nloops call t % otimer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % otimer_stop ( message = 'OMP time:' , print = . false .) call t % otimer_write ( 'test/test21_otimes' ) ! Optionally, write the elapsed time to a file call ut % check ( res = t % omp_time , expected = real ( nloops , rk ) * 1.0_rk , tol = 1.0e-1_rk , msg = 'test21' ) #endif end program test21","tags":"","loc":"program/test21.html"},{"title":"test9.f90 – ForTime","text":"This file depends on sourcefile~~test9.f90~~EfferentGraph sourcefile~test9.f90 test9.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~test9.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test9 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: nl , nloops = 3 #if defined(USE_OMP) ! OMP time with nloops call t % otimer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % otimer_stop ( message = 'OMP time:' ) call t % otimer_write ( 'test/test9_otimes' ) ! Optionally, write the elapsed time to a file call ut % check ( res = t % omp_time , expected = real ( nloops , rk ) * 1.0_rk , tol = 1.0e-1_rk , msg = 'test9' ) #endif end program test9","tags":"","loc":"sourcefile/test9.f90.html"},{"title":"test22.f90 – ForTime","text":"This file depends on sourcefile~~test22.f90~~EfferentGraph sourcefile~test22.f90 test22.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~test22.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test22 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: ierr #if defined(USE_MPI) ! MPI time call mpi_init ( ierr ) call t % mtimer_start () call sleep ( 1 ) ! Perform operations here call t % mtimer_stop ( print = . false .) call mpi_finalize ( ierr ) call ut % check ( res = t % mpi_time , expected = 1.0_rk , tol = 1.0e-1_rk , msg = 'test22' ) #endif end program test22","tags":"","loc":"sourcefile/test22.f90.html"},{"title":"test10.f90 – ForTime","text":"This file depends on sourcefile~~test10.f90~~EfferentGraph sourcefile~test10.f90 test10.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~test10.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test10 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: ierr #if defined(USE_MPI) ! MPI time call mpi_init ( ierr ) call t % mtimer_start () call sleep ( 1 ) ! Perform operations here call t % mtimer_stop () call mpi_finalize ( ierr ) call ut % check ( res = t % mpi_time , expected = 1.0_rk , tol = 1.0e-1_rk , msg = 'test10' ) #endif end program test10","tags":"","loc":"sourcefile/test10.f90.html"},{"title":"test12.f90 – ForTime","text":"This file depends on sourcefile~~test12.f90~~EfferentGraph sourcefile~test12.f90 test12.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~test12.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test12 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: nl , nloops = 3 integer :: ierr #if defined(USE_MPI) ! MPI time with nloops call mpi_init ( ierr ) call t % mtimer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % mtimer_stop ( message = 'MPI time:' ) call mpi_finalize ( ierr ) call t % mtimer_write ( 'test/test12_mtimes' ) ! Optionally, write the elapsed time to a file call ut % check ( res = t % mpi_time , expected = real ( nloops , rk ) * 1.0_rk , tol = 1.0e-1_rk , msg = 'test12' ) #endif end program test12","tags":"","loc":"sourcefile/test12.f90.html"},{"title":"test2.f90 – ForTime","text":"This file depends on sourcefile~~test2.f90~~EfferentGraph sourcefile~test2.f90 test2.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~test2.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test2 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: nl , nloops = 3 ! Elapsed time with nloops call t % timer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % timer_stop ( nloops = nloops , message = 'Elapsed time:' ) call t % timer_write ( 'test/test2_etimes' ) ! Optionally, write the elapsed time to a file call ut % check ( res = t % elapsed_time , expected = 1.0_rk , tol = 1.0e-1_rk , msg = 'test2' ) end program test2","tags":"","loc":"sourcefile/test2.f90.html"},{"title":"test13.f90 – ForTime","text":"This file depends on sourcefile~~test13.f90~~EfferentGraph sourcefile~test13.f90 test13.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~test13.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test13 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut ! Elapsed time call t % timer_start () call sleep ( 1 ) ! Perform operations here call t % timer_stop ( print = . false .) call ut % check ( res = t % elapsed_time , expected = 1.0_rk , tol = 1.0e-1_rk , msg = 'test13' ) end program test13","tags":"","loc":"sourcefile/test13.f90.html"},{"title":"test3.f90 – ForTime","text":"This file depends on sourcefile~~test3.f90~~EfferentGraph sourcefile~test3.f90 test3.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~test3.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test3 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: nl , nloops = 3 ! Elapsed time with nloops call t % timer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % timer_stop ( message = 'Elapsed time:' ) call t % timer_write ( 'test/test3_etimes' ) ! Optionally, write the elapsed time to a file call ut % check ( res = t % elapsed_time , expected = real ( nloops , rk ) * 1.0_rk , tol = 1.0e-1_rk , msg = 'test3' ) end program test3","tags":"","loc":"sourcefile/test3.f90.html"},{"title":"test8.f90 – ForTime","text":"This file depends on sourcefile~~test8.f90~~EfferentGraph sourcefile~test8.f90 test8.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~test8.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test8 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: nl , nloops = 3 #if defined(USE_OMP) ! OMP time with nloops call t % otimer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % otimer_stop ( nloops = nloops , message = 'OMP time:' ) call t % otimer_write ( 'test/test8_otimes' ) ! Optionally, write the elapsed time to a file call ut % check ( res = t % omp_time , expected = 1.0_rk , tol = 1.0e-1_rk , msg = 'test8' ) #endif end program test8","tags":"","loc":"sourcefile/test8.f90.html"},{"title":"test23.f90 – ForTime","text":"This file depends on sourcefile~~test23.f90~~EfferentGraph sourcefile~test23.f90 test23.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~test23.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test23 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: nl , nloops = 3 integer :: ierr #if defined(USE_MPI) ! MPI time with nloops call mpi_init ( ierr ) call t % mtimer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % mtimer_stop ( nloops = nloops , message = 'MPI time:' , print = . false .) call mpi_finalize ( ierr ) call t % mtimer_write ( 'test/test23_mtimes' ) ! Optionally, write the elapsed time to a file call ut % check ( res = t % mpi_time , expected = 1.0_rk , tol = 1.0e-1_rk , msg = 'test23' ) #endif end program test23","tags":"","loc":"sourcefile/test23.f90.html"},{"title":"example2.f90 – ForTime","text":"This file depends on sourcefile~~example2.f90~~EfferentGraph sourcefile~example2.f90 example2.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~example2.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program example2 use fortime implicit none type ( timer ) :: t integer :: nl , nloops = 3 call t % timer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % timer_stop ( nloops = nloops , message = 'Elapsed time:' , print = . true .) ! nloops, message and print are optional. call t % timer_write ( 'example/example2_etimes' ) ! Optionally, write the elapsed time to a file end program example2","tags":"","loc":"sourcefile/example2.f90.html"},{"title":"test7.f90 – ForTime","text":"This file depends on sourcefile~~test7.f90~~EfferentGraph sourcefile~test7.f90 test7.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~test7.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test7 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut #if defined(USE_OMP) ! OMP time call t % otimer_start () call sleep ( 1 ) ! Perform operations here call t % otimer_stop () call ut % check ( res = t % omp_time , expected = 1.0_rk , tol = 1.0e-1_rk , msg = 'test7' ) #endif end program test7","tags":"","loc":"sourcefile/test7.f90.html"},{"title":"test16.f90 – ForTime","text":"This file depends on sourcefile~~test16.f90~~EfferentGraph sourcefile~test16.f90 test16.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~test16.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test16 use kinds use fortime implicit none type ( timer ) :: t ! CPU time call t % ctimer_start () call sleep ( 1 ) ! Perform operations here call t % ctimer_stop ( print = . false .) end program test16","tags":"","loc":"sourcefile/test16.f90.html"},{"title":"test6.f90 – ForTime","text":"This file depends on sourcefile~~test6.f90~~EfferentGraph sourcefile~test6.f90 test6.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~test6.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test6 use kinds use fortime implicit none type ( timer ) :: t integer :: nl , nloops = 3 ! CPU time with nloops call t % ctimer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % ctimer_stop ( message = 'CPU time:' ) call t % ctimer_write ( 'test/test6_ctimes' ) ! Optionally, write the elapsed time to a file end program test6","tags":"","loc":"sourcefile/test6.f90.html"},{"title":"test20.f90 – ForTime","text":"This file depends on sourcefile~~test20.f90~~EfferentGraph sourcefile~test20.f90 test20.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~test20.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test20 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: nl , nloops = 3 #if defined(USE_OMP) ! OMP time with nloops call t % otimer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % otimer_stop ( nloops = nloops , message = 'OMP time:' , print = . false .) call t % otimer_write ( 'test/test20_otimes' ) ! Optionally, write the elapsed time to a file call ut % check ( res = t % omp_time , expected = 1.0_rk , tol = 1.0e-1_rk , msg = 'test20' ) #endif end program test20","tags":"","loc":"sourcefile/test20.f90.html"},{"title":"example3.f90 – ForTime","text":"This file depends on sourcefile~~example3.f90~~EfferentGraph sourcefile~example3.f90 example3.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~example3.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program example3 use fortime implicit none type ( timer ) :: t call t % ctimer_start () call sleep ( 1 ) ! Perform operations here call t % ctimer_stop () end program example3","tags":"","loc":"sourcefile/example3.f90.html"},{"title":"test11.f90 – ForTime","text":"This file depends on sourcefile~~test11.f90~~EfferentGraph sourcefile~test11.f90 test11.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~test11.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test11 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: nl , nloops = 3 integer :: ierr #if defined(USE_MPI) ! MPI time with nloops call mpi_init ( ierr ) call t % mtimer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % mtimer_stop ( nloops = nloops , message = 'MPI time:' ) call mpi_finalize ( ierr ) call t % mtimer_write ( 'test/test11_mtimes' ) ! Optionally, write the elapsed time to a file call ut % check ( res = t % mpi_time , expected = 1.0_rk , tol = 1.0e-1_rk , msg = 'test11' ) #endif end program test11","tags":"","loc":"sourcefile/test11.f90.html"},{"title":"test15.f90 – ForTime","text":"This file depends on sourcefile~~test15.f90~~EfferentGraph sourcefile~test15.f90 test15.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~test15.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test15 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: nl , nloops = 3 ! Elapsed time with nloops call t % timer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % timer_stop ( message = 'Elapsed time:' , print = . false .) call t % timer_write ( 'test/test15_etimes' ) ! Optionally, write the elapsed time to a file call ut % check ( res = t % elapsed_time , expected = real ( nloops , rk ) * 1.0_rk , tol = 1.0e-1_rk , msg = 'test15' ) end program test15","tags":"","loc":"sourcefile/test15.f90.html"},{"title":"test24.f90 – ForTime","text":"This file depends on sourcefile~~test24.f90~~EfferentGraph sourcefile~test24.f90 test24.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~test24.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test24 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: nl , nloops = 3 integer :: ierr #if defined(USE_MPI) ! MPI time with nloops call mpi_init ( ierr ) call t % mtimer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % mtimer_stop ( message = 'MPI time:' , print = . false .) call mpi_finalize ( ierr ) call t % mtimer_write ( 'test/test24_mtimes' ) ! Optionally, write the elapsed time to a file call ut % check ( res = t % mpi_time , expected = real ( nloops , rk ) * 1.0_rk , tol = 1.0e-1_rk , msg = 'test24' ) #endif end program test24","tags":"","loc":"sourcefile/test24.f90.html"},{"title":"test5.f90 – ForTime","text":"This file depends on sourcefile~~test5.f90~~EfferentGraph sourcefile~test5.f90 test5.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~test5.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test5 use kinds use fortime implicit none type ( timer ) :: t integer :: nl , nloops = 3 ! CPU time with nloops call t % ctimer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % ctimer_stop ( nloops = nloops , message = 'CPU time:' ) call t % ctimer_write ( 'test/test5_ctimes' ) ! Optionally, write the elapsed time to a file end program test5","tags":"","loc":"sourcefile/test5.f90.html"},{"title":"test14.f90 – ForTime","text":"This file depends on sourcefile~~test14.f90~~EfferentGraph sourcefile~test14.f90 test14.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~test14.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test14 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: nl , nloops = 3 ! Elapsed time with nloops call t % timer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % timer_stop ( nloops = nloops , message = 'Elapsed time:' , print = . false .) call t % timer_write ( 'test/test14_etimes' ) ! Optionally, write the elapsed time to a file call ut % check ( res = t % elapsed_time , expected = 1.0_rk , tol = 1.0e-1_rk , msg = 'test14' ) end program test14","tags":"","loc":"sourcefile/test14.f90.html"},{"title":"fortime.f90 – ForTime","text":"Files dependent on this one sourcefile~~fortime.f90~~AfferentGraph sourcefile~fortime.f90 fortime.f90 sourcefile~example1.f90 example1.f90 sourcefile~example1.f90->sourcefile~fortime.f90 sourcefile~example2.f90 example2.f90 sourcefile~example2.f90->sourcefile~fortime.f90 sourcefile~example3.f90 example3.f90 sourcefile~example3.f90->sourcefile~fortime.f90 sourcefile~example4.f90 example4.f90 sourcefile~example4.f90->sourcefile~fortime.f90 sourcefile~test1.f90 test1.f90 sourcefile~test1.f90->sourcefile~fortime.f90 sourcefile~test10.f90 test10.f90 sourcefile~test10.f90->sourcefile~fortime.f90 sourcefile~test11.f90 test11.f90 sourcefile~test11.f90->sourcefile~fortime.f90 sourcefile~test12.f90 test12.f90 sourcefile~test12.f90->sourcefile~fortime.f90 sourcefile~test13.f90 test13.f90 sourcefile~test13.f90->sourcefile~fortime.f90 sourcefile~test14.f90 test14.f90 sourcefile~test14.f90->sourcefile~fortime.f90 sourcefile~test15.f90 test15.f90 sourcefile~test15.f90->sourcefile~fortime.f90 sourcefile~test16.f90 test16.f90 sourcefile~test16.f90->sourcefile~fortime.f90 sourcefile~test17.f90 test17.f90 sourcefile~test17.f90->sourcefile~fortime.f90 sourcefile~test18.f90 test18.f90 sourcefile~test18.f90->sourcefile~fortime.f90 sourcefile~test19.f90 test19.f90 sourcefile~test19.f90->sourcefile~fortime.f90 sourcefile~test2.f90 test2.f90 sourcefile~test2.f90->sourcefile~fortime.f90 sourcefile~test20.f90 test20.f90 sourcefile~test20.f90->sourcefile~fortime.f90 sourcefile~test21.f90 test21.f90 sourcefile~test21.f90->sourcefile~fortime.f90 sourcefile~test22.f90 test22.f90 sourcefile~test22.f90->sourcefile~fortime.f90 sourcefile~test23.f90 test23.f90 sourcefile~test23.f90->sourcefile~fortime.f90 sourcefile~test24.f90 test24.f90 sourcefile~test24.f90->sourcefile~fortime.f90 sourcefile~test3.f90 test3.f90 sourcefile~test3.f90->sourcefile~fortime.f90 sourcefile~test4.f90 test4.f90 sourcefile~test4.f90->sourcefile~fortime.f90 sourcefile~test5.f90 test5.f90 sourcefile~test5.f90->sourcefile~fortime.f90 sourcefile~test6.f90 test6.f90 sourcefile~test6.f90->sourcefile~fortime.f90 sourcefile~test7.f90 test7.f90 sourcefile~test7.f90->sourcefile~fortime.f90 sourcefile~test8.f90 test8.f90 sourcefile~test8.f90->sourcefile~fortime.f90 sourcefile~test9.f90 test9.f90 sourcefile~test9.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !> This module provides a timer object for measuring elapsed time. !> It includes procedures for starting and stopping the timer, as well !> as calculating and printing the elapsed time in seconds. module fortime use kinds implicit none private public :: timer , timer_start , timer_stop !=============================================================================== type :: timer integer , private :: clock_rate ! Processor clock rate integer , private :: clock_start ! Start time in processor ticks integer , private :: clock_end ! End time in processor ticks integer , private :: clock_elapsed ! Elapsed time in processor ticks real ( rk ) :: elapsed_time ! Elapsed time in seconds real ( rk ), private :: cpu_start ! Start CPU time real ( rk ), private :: cpu_end ! End CPU time real ( rk ), private :: cpu_elapsed ! Elapsed CPU time real ( rk ) :: cpu_time ! Elapsed time in seconds #if defined(USE_OMP) real ( rk ), private :: omp_start ! Start OMP time real ( rk ), private :: omp_end ! End OMP time real ( rk ), private :: omp_elapsed ! Elapsed OMP time real ( rk ) :: omp_time ! Elapsed time in seconds #endif #if defined(USE_MPI) real ( rk ), private :: mpi_start ! Start MPI time real ( rk ), private :: mpi_end ! End MPI time real ( rk ), private :: mpi_elapsed ! Elapsed MPI time real ( rk ) :: mpi_time ! Elapsed time in seconds #endif contains procedure :: timer_start ! Procedure for starting the timer procedure :: timer_stop ! Procedure for stopping the timer procedure :: timer_write ! Procedure for writing elapsed time to a file procedure :: ctimer_start ! Procedure for starting the CPU timer procedure :: ctimer_stop ! Procedure for stopping the CPU timer procedure :: ctimer_write ! Procedure for writing elapsed CPU time to a file #if defined(USE_OMP) procedure :: otimer_start ! Procedure for starting the OMP timer procedure :: otimer_stop ! Procedure for stopping the OMP timer procedure :: otimer_write ! Procedure for writing elapsed OMP time to a file #endif #if defined(USE_MPI) procedure :: mtimer_start ! Procedure for starting the MPI timer procedure :: mtimer_stop ! Procedure for stopping the MPI timer procedure :: mtimer_write ! Procedure for writing elapsed MPI time to a file #endif end type !=============================================================================== contains !=============================================================================== !> author: Seyed Ali Ghasemi !> Starts the timer by recording the current processor clock value. !> This value is used to calculate the elapsed time later. impure subroutine timer_start ( this ) class ( timer ), intent ( inout ) :: this ! Get the processor clock rate call system_clock ( count_rate = this % clock_rate ) ! Start the timer call system_clock ( count = this % clock_start ) end subroutine timer_start !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> Stops the timer and calculates the elapsed time. !> Optionally, it can print a message along with the elapsed time. impure subroutine timer_stop ( this , nloops , message , print ) class ( timer ), intent ( inout ) :: this integer , intent ( in ), optional :: nloops character ( * ), intent ( in ), optional :: message character (:), allocatable :: msg logical , intent ( in ), optional :: print ! Stop the timer call system_clock ( count = this % clock_end ) ! Calculate the elapsed processor ticks this % clock_elapsed = this % clock_end - this % clock_start ! Convert processor ticks to seconds if (. not . present ( nloops )) & this % elapsed_time = real ( this % clock_elapsed , kind = rk ) / real ( this % clock_rate , kind = rk ) if ( present ( nloops )) & this % elapsed_time = real ( this % clock_elapsed , kind = rk ) / real ( this % clock_rate , kind = rk ) / real ( nloops , kind = rk ) ! Print the elapsed time if (. not . present ( message )) then msg = \"Elapsed time:\" else msg = message end if if ( present ( print )) then if ( print ) call print_time ( this % elapsed_time , msg ) else call print_time ( this % elapsed_time , msg ) end if ! Deallocate the message if ( allocated ( msg )) deallocate ( msg ) end subroutine timer_stop !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> Writes the elapsed time to a file. impure subroutine timer_write ( this , file_name ) class ( timer ), intent ( in ) :: this character ( * ), intent ( in ) :: file_name logical :: file_exists integer :: nunit ! Check if the file exists inquire ( file = file_name , exist = file_exists ) ! Open the file in appropriate mode if ( file_exists ) then open ( newunit = nunit , file = file_name , status = 'old' , action = 'write' , position = 'append' ) else open ( newunit = nunit , file = file_name , status = 'new' , action = 'write' ) end if ! Write the elapsed time to the file write ( nunit , '(g0)' ) this % elapsed_time ! Close the file close ( nunit ) end subroutine timer_write !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> Starts the timer by recording the current CPU time value. !> This value is used to calculate the CPU time later. impure subroutine ctimer_start ( this ) class ( timer ), intent ( inout ) :: this ! Start the timer call cpu_time ( this % cpu_start ) end subroutine ctimer_start !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> Stops the timer and calculates the CPU time. !> Optionally, it can print a message along with the CPU time. impure subroutine ctimer_stop ( this , nloops , message , print ) class ( timer ), intent ( inout ) :: this integer , intent ( in ), optional :: nloops character ( * ), intent ( in ), optional :: message character (:), allocatable :: msg logical , intent ( in ), optional :: print ! Stop the timer call cpu_time ( this % cpu_end ) ! Calculate the elapsed CPU time this % cpu_elapsed = this % cpu_end - this % cpu_start ! Convert CPU time to seconds if (. not . present ( nloops )) this % cpu_time = this % cpu_elapsed if ( present ( nloops )) this % cpu_time = this % cpu_elapsed / real ( nloops , kind = rk ) ! Print the elapsed time if (. not . present ( message )) then msg = \"CPU time:\" else msg = message end if if ( present ( print )) then if ( print ) call print_time ( this % cpu_time , msg ) else call print_time ( this % cpu_time , msg ) end if ! Deallocate the message if ( allocated ( msg )) deallocate ( msg ) end subroutine ctimer_stop !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> Writes the CPU time to a file. impure subroutine ctimer_write ( this , file_name ) class ( timer ), intent ( in ) :: this character ( * ), intent ( in ) :: file_name logical :: file_exists integer :: nunit ! Check if the file exists inquire ( file = file_name , exist = file_exists ) ! Open the file in appropriate mode if ( file_exists ) then open ( newunit = nunit , file = file_name , status = 'old' , action = 'write' , position = 'append' ) else open ( newunit = nunit , file = file_name , status = 'new' , action = 'write' ) end if ! Write the CPU time to the file write ( nunit , '(g0)' ) this % cpu_time ! Close the file close ( nunit ) end subroutine ctimer_write !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi !> Starts the timer by recording the current OMP time value. !> This value is used to calculate the OMP time later. #if defined(USE_OMP) impure subroutine otimer_start ( this ) use omp_lib class ( timer ), intent ( inout ) :: this ! Start the timer this % omp_start = omp_get_wtime () end subroutine otimer_start !=============================================================================== #endif #if defined(USE_OMP) !=============================================================================== !> author: Seyed Ali Ghasemi !> Stops the timer and calculates the OMP time. !> Optionally, it can print a message along with the OMP time. impure subroutine otimer_stop ( this , nloops , message , print ) use omp_lib class ( timer ), intent ( inout ) :: this integer , intent ( in ), optional :: nloops character ( * ), intent ( in ), optional :: message character (:), allocatable :: msg logical , intent ( in ), optional :: print ! Stop the timer this % omp_end = omp_get_wtime () ! Calculate the elapsed OMP time this % omp_elapsed = this % omp_end - this % omp_start ! Convert OMP time to seconds if (. not . present ( nloops )) this % omp_time = this % omp_elapsed if ( present ( nloops )) this % omp_time = this % omp_elapsed / real ( nloops , kind = rk ) ! Print the elapsed time if (. not . present ( message )) then msg = \"OMP time:\" else msg = message end if if ( present ( print )) then if ( print ) call print_time ( this % omp_time , msg ) else call print_time ( this % omp_time , msg ) end if ! Deallocate the message if ( allocated ( msg )) deallocate ( msg ) end subroutine otimer_stop !=============================================================================== #endif #if defined(USE_OMP) !=============================================================================== !> author: Seyed Ali Ghasemi !> Writes the OMP time to a file. impure subroutine otimer_write ( this , file_name ) use omp_lib class ( timer ), intent ( in ) :: this character ( * ), intent ( in ) :: file_name logical :: file_exists integer :: nunit ! Check if the file exists inquire ( file = file_name , exist = file_exists ) ! Open the file in appropriate mode if ( file_exists ) then open ( newunit = nunit , file = file_name , status = 'old' , action = 'write' , position = 'append' ) else open ( newunit = nunit , file = file_name , status = 'new' , action = 'write' ) end if ! Write the OMP time to the file write ( nunit , '(g0)' ) this % omp_time ! Close the file close ( nunit ) end subroutine otimer_write !=============================================================================== #endif #if defined(USE_MPI) !=============================================================================== !> author: Seyed Ali Ghasemi !> Starts the timer by recording the current MPI time value. !> This value is used to calculate the MPI time later. impure subroutine mtimer_start ( this ) ! include 'mpif.h' class ( timer ), intent ( inout ) :: this interface function mpi_wtime () import rk real ( rk ) :: mpi_wtime end function mpi_wtime end interface ! Start the timer this % mpi_start = mpi_wtime () end subroutine mtimer_start !=============================================================================== #endif #if defined(USE_MPI) !=============================================================================== !> author: Seyed Ali Ghasemi !> Stops the timer and calculates the MPI time. !> Optionally, it can print a message along with the MPI time. impure subroutine mtimer_stop ( this , nloops , message , print ) ! include 'mpif.h' class ( timer ), intent ( inout ) :: this integer , intent ( in ), optional :: nloops character ( * ), intent ( in ), optional :: message character (:), allocatable :: msg logical , intent ( in ), optional :: print interface function mpi_wtime () import rk real ( rk ) :: mpi_wtime end function mpi_wtime end interface ! Stop the timer this % mpi_end = mpi_wtime () ! Calculate the elapsed MPI time this % mpi_elapsed = this % mpi_end - this % mpi_start ! Convert MPI time to seconds if (. not . present ( nloops )) this % mpi_time = this % mpi_elapsed if ( present ( nloops )) this % mpi_time = this % mpi_elapsed / real ( nloops , kind = rk ) ! Print the elapsed time if (. not . present ( message )) then msg = \"MPI time:\" else msg = message end if if ( present ( print )) then if ( print ) call print_time ( this % mpi_time , msg ) else call print_time ( this % mpi_time , msg ) end if ! Deallocate the message if ( allocated ( msg )) deallocate ( msg ) end subroutine mtimer_stop !=============================================================================== #endif #if defined(USE_MPI) !=============================================================================== !> author: Seyed Ali Ghasemi !> Writes the MPI time to a file. impure subroutine mtimer_write ( this , file_name ) class ( timer ), intent ( in ) :: this character ( * ), intent ( in ) :: file_name logical :: file_exists integer :: nunit ! Check if the file exists inquire ( file = file_name , exist = file_exists ) ! Open the file in appropriate mode if ( file_exists ) then open ( newunit = nunit , file = file_name , status = 'old' , action = 'write' , position = 'append' ) else open ( newunit = nunit , file = file_name , status = 'new' , action = 'write' ) end if ! Write the MPI time to the file write ( nunit , '(g0)' ) this % mpi_time ! Close the file close ( nunit ) end subroutine mtimer_write !=============================================================================== #endif !=============================================================================== !> author: Seyed Ali Ghasemi impure subroutine print_time ( time , message ) real ( rk ), intent ( in ) :: time character ( * ), intent ( in ) :: message print '(A, F16.9, \" [s]\")' , trim ( message ), time end subroutine print_time !=============================================================================== end module fortime","tags":"","loc":"sourcefile/fortime.f90.html"},{"title":"test4.f90 – ForTime","text":"This file depends on sourcefile~~test4.f90~~EfferentGraph sourcefile~test4.f90 test4.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~test4.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test4 use kinds use fortime implicit none type ( timer ) :: t ! CPU time call t % ctimer_start () call sleep ( 1 ) ! Perform operations here call t % ctimer_stop () end program test4","tags":"","loc":"sourcefile/test4.f90.html"},{"title":"test19.f90 – ForTime","text":"This file depends on sourcefile~~test19.f90~~EfferentGraph sourcefile~test19.f90 test19.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~test19.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test19 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut #if defined(USE_OMP) ! OMP time call t % otimer_start () call sleep ( 1 ) ! Perform operations here call t % otimer_stop ( print = . false .) call ut % check ( res = t % omp_time , expected = 1.0_rk , tol = 1.0e-1_rk , msg = 'test19' ) #endif end program test19","tags":"","loc":"sourcefile/test19.f90.html"},{"title":"test18.f90 – ForTime","text":"This file depends on sourcefile~~test18.f90~~EfferentGraph sourcefile~test18.f90 test18.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~test18.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test18 use kinds use fortime implicit none type ( timer ) :: t integer :: nl , nloops = 3 ! CPU time with nloops call t % ctimer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % ctimer_stop ( message = 'CPU time:' , print = . false .) call t % ctimer_write ( 'test/test18_ctimes' ) ! Optionally, write the elapsed time to a file end program test18","tags":"","loc":"sourcefile/test18.f90.html"},{"title":"test1.f90 – ForTime","text":"This file depends on sourcefile~~test1.f90~~EfferentGraph sourcefile~test1.f90 test1.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~test1.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test1 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut ! Elapsed time call t % timer_start () call sleep ( 1 ) ! Perform operations here call t % timer_stop () call ut % check ( res = t % elapsed_time , expected = 1.0_rk , tol = 1.0e-1_rk , msg = 'test1' ) end program test1","tags":"","loc":"sourcefile/test1.f90.html"},{"title":"example4.f90 – ForTime","text":"This file depends on sourcefile~~example4.f90~~EfferentGraph sourcefile~example4.f90 example4.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~example4.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program example4 use fortime implicit none type ( timer ) :: t integer :: nl , nloops = 3 call t % ctimer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % ctimer_stop ( nloops = nloops , message = 'CPU time:' , print = . true .) ! nloops, message and print are optional call t % ctimer_write ( 'example/example4_ctimes' ) ! Optionally, write the elapsed time to a file end program example4","tags":"","loc":"sourcefile/example4.f90.html"},{"title":"example1.f90 – ForTime","text":"This file depends on sourcefile~~example1.f90~~EfferentGraph sourcefile~example1.f90 example1.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~example1.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program example1 use fortime implicit none type ( timer ) :: t call t % timer_start () call sleep ( 1 ) ! Perform operations here call t % timer_stop () end program example1","tags":"","loc":"sourcefile/example1.f90.html"},{"title":"test17.f90 – ForTime","text":"This file depends on sourcefile~~test17.f90~~EfferentGraph sourcefile~test17.f90 test17.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~test17.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test17 use kinds use fortime implicit none type ( timer ) :: t integer :: nl , nloops = 3 ! CPU time with nloops call t % ctimer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % ctimer_stop ( nloops = nloops , message = 'CPU time:' , print = . false .) call t % ctimer_write ( 'test/test17_ctimes' ) ! Optionally, write the elapsed time to a file end program test17","tags":"","loc":"sourcefile/test17.f90.html"},{"title":"test21.f90 – ForTime","text":"This file depends on sourcefile~~test21.f90~~EfferentGraph sourcefile~test21.f90 test21.f90 sourcefile~fortime.f90 fortime.f90 sourcefile~test21.f90->sourcefile~fortime.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code program test21 use kinds use fortime use forunittest implicit none type ( timer ) :: t type ( unit_test ) :: ut integer :: nl , nloops = 3 #if defined(USE_OMP) ! OMP time with nloops call t % otimer_start () do nl = 1 , nloops call sleep ( 1 ) ! Perform operations ntimes end do call t % otimer_stop ( message = 'OMP time:' , print = . false .) call t % otimer_write ( 'test/test21_otimes' ) ! Optionally, write the elapsed time to a file call ut % check ( res = t % omp_time , expected = real ( nloops , rk ) * 1.0_rk , tol = 1.0e-1_rk , msg = 'test21' ) #endif end program test21","tags":"","loc":"sourcefile/test21.f90.html"}]}